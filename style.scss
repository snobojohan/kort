body.example {
	font-family: sans-serif;
	background-color: pink;
}

.proto-inactive {
	opacity: 0.2 !important;
}
#Global_Clicker {
	background-color: #FFF;
	opacity: 0.4;
	position: absolute;
	top: 0;
	left: 0;
	padding: .2em;
	z-index: 985;
	cursor: pointer;
}
#Global_Clicker a {
	color: #000;
	text-decoration: none;
}
#Global_Clicker a:hover {
	text-decoration: underline;
	color: #000;
}
.box-shadow-menu {
  position: relative;
  padding-left: 1.25em;
}
.box-shadow-menu:before {
  content: "";
  position: absolute;
  left: 0;
  top: 0.25em;
  width: 1em;
  height: 0.15em;
  background: #000;
  box-shadow: 
    0 0.25em 0 0 #000,
    0 0.5em 0 0 #000;
}

#Global_Blocker {
	background-color: #FFF;
	opacity: 0.8;
	position: fixed;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
	z-index: 980;
	display: none;
}
#Global_Content {
	/* background-color: #FFF; */
	position: absolute;
	top: 150%;
	left: 2%;
	min-height: 80%;
	width: 96%;
	/* max-width: 600px; */
	z-index: 999;
	transition: top 500ms cubic-bezier(0.230, 1.000, 0.320, 1.000);
	overflow: visible;

}
#Global_Content .thecard {
    margin: 0 auto;
    max-width: 700px;
    min-height: 600px;
    background-color: #FFF;
    -webkit-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.3);
    -moz-box-shadow:    0px 0px 2px 0px rgba(0, 0, 0, 0.3);
    box-shadow:         0px 0px 2px 0px rgba(0, 0, 0, 0.3);
}
.cardBox, .cardBox * {
	box-sizing: border-box;
}
.cardBox {
    padding: 1em;
	.svtButton-Play {
		width: 100%;
	}
	h1 {
		font-family: georgia, serif;
		font-size: 3em;
	}
	h2 {
		font-family: "Helvetic Neue", Helvetica, Arial, sans-serif;
		font-size: 1.8em;
		font-weight: 200;
	}

}
.cardBox-top {
	padding-bottom: 0;
	border-bottom: 2px solid #EEE;
}
.cardBox .svtTextBread-Article p {
    max-width: 32em;
}
.card-logo {
	display: block;
	margin-bottom: 1em;
}
.card-img-top {
	margin: 1em 0;
	width: 100%;
}
.card-metabox {
	padding: 1em 0;
	margin-bottom: .5em;
	border-top: 1px solid #EEEEEE;
	border-bottom: 1px solid #EEEEEE;
	color: #555555;
}

#Global_Content.showme {
	top: 20px;
	
}
#Global_Content a {
	color: #555;
	text-decoration: none;
	font-size: 1.2em;
}
#Global_Content a:hover {
	color: #000;
	text-decoration: underline;
}
#Global_Content ul {
	margin: 5em 1em;
	padding: 0;
}
#Global_Content ul li {
	list-style-type: none;
	margin: 1.5em 0;
}

/********* FLEX BOX *************/
.Demo {
    width: 100%;
    padding: .8em 1em 0;
    margin-bottom: 1em;
    background: rgba(147,128,108,.2);
    border-radius: 3px;
}


$breakpoints: (
		"(min-width: 24em)" "small",
		"(min-width: 36em)" "med",
		"(min-width: 48em)" "large"
);

@mixin breakpoint($point) {
	@each $breakpoint in $breakpoints {
		$query: nth($breakpoint, 1);
		$name: nth($breakpoint, 2);
		@if ($name == $point) {
			@media #{$query} { @content }
		}
	}
}

.Grid {
    display: flex;
    flex-wrap: wrap;
    list-style: none;
    margin: 0;
    padding: 0;
}

.Grid-cell {
    flex: 1;
}

.Grid--flexCells {
& > .Grid-cell {
        display: flex;
    }
}

.Grid--top {
    align-items: flex-start;
}

.Grid--bottom {
    align-items: flex-end;
}

.Grid--center {
    align-items: center;
}

.Grid-cell--top {
    align-self: flex-start;
}

.Grid-cell--bottom {
    align-self: flex-end;
}

.Grid-cell--center {
    align-self: center;
}

@mixin grid-sizing($name: "") {
$sep: "-";
    @if $name == "" {
        $sep: "";
    }
    .#{$name}#{$sep}Grid--fit > .Grid-cell {
        flex: 1;
    }
    .#{$name}#{$sep}Grid--full > .Grid-cell {
        flex: 0 0 100%;
    }
    .#{$name}#{$sep}Grid--1of2 > .Grid-cell {
        flex: 0 0 50%
    }
    .#{$name}#{$sep}Grid--1of3 > .Grid-cell {
        flex: 0 0 33.3333%
    }
    .#{$name}#{$sep}Grid--1of4 > .Grid-cell {
        flex: 0 0 25%
    }
}

// create the default grid-sizing modifiers
@include grid-sizing();

// create grid-sizing modifiers for each breakpoint
@each $breakpoint in $breakpoints {
$name: nth($breakpoint, 2);
    @include breakpoint($name) {
    @include grid-sizing($name);
    }
}

@mixin grid-gutters($name: "") {
$sep: "-";
    @if $name == "" {
        $sep: "";
    }
    .#{$name}#{$sep}Grid--gutters {
        margin-left: -1em;
& > .Grid-cell {
        padding-left: 1em;
    }
}
.#{$name}#{$sep}Grid--guttersLarge {
    margin-left: -1.5em;
& > .Grid-cell {
        padding-left: 1.5em;
    }
}
.#{$name}#{$sep}Grid--gutters2x {
    margin-left: -2em;
& > .Grid-cell {
        padding-left: 2em;
    }
}
.#{$name}#{$sep}Grid--gutters3x {
    margin-left: -3em;
& > .Grid-cell {
        padding-left: 3em;
    }
}
}

// create the default grid-gutters modifiers
@include grid-gutters();

// create grid-gutters modifiers for each breakpoint
@each $breakpoint in $breakpoints {
$name: nth($breakpoint, 2);
    @include breakpoint($name) {
    @include grid-gutters($name);
    }
}

// Firefox doesn't yet support multiline Flexboxes so we
// have to fake it. Remove this once this bug is resolved
// https://bugzilla.mozilla.org/show_bug.cgi?id=702508
@supports not (flex-wrap: wrap) {
    .Grid--ffMultilineSupport {
        display: block;
& > .Grid-cell {
        display: inline-block;
        vertical-align: top;
    }
}
@mixin grid-sizing($name: "") {
$sep: "-";
    @if $name == "" {
        $sep: "";
    }
    .#{$name}#{$sep}Grid--full {
        display: block;
& > .Grid-cell {
        display: block;
    }
}
.#{$name}#{$sep}Grid--fit,
.#{$name}#{$sep}Grid--1of2,
.#{$name}#{$sep}Grid--1of3,
.#{$name}#{$sep}Grid--1of4 {
    display: flex;
}
}
@include grid-sizing();
@each $breakpoint in $breakpoints {
$name: nth($breakpoint, 2);
    @include breakpoint($name) {
    @include grid-sizing($name);
    }
}
}

/* MEDIA */
@mixin sizes($name: "") {
	$sep: "-";
	@if $name == "" {
		$sep: "";
	}
	.u-#{$name}#{$sep}full {
		width: 100% !important;
		flex: none !important;
	}
	.u-#{$name}#{$sep}1of2 {
		width: 50% !important;
		flex: none !important;
	}
	.u-#{$name}#{$sep}1of3 {
		width: 33.3333% !important;
		flex: none !important;
	}
	.u-#{$name}#{$sep}2of3 {
		width: 66.6667% !important;
		flex: none !important;
	}
	.u-#{$name}#{$sep}1of4 {
		width: 25% !important;
		flex: none !important;
	}
	.u-#{$name}#{$sep}3of4 {
		width: 75% !important;
		flex: none !important;
	}
};

// create global sizes
@include sizes();

// create sizes for each breakpoint
@each $breakpoint in $breakpoints {
	$name: nth($breakpoint, 2);
	@include breakpoint($name) {
		@include sizes($name);
	}
}